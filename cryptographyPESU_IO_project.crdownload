# -*- coding: utf-8 -*-
"""cryptography.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBFNb0yKO1t-JpCnwZ9v28opkKCgz2Oh
"""

plainText=[]
keyMatrix = []
cipherTextList =[]
def index_2d(keyMatrix, v):
    for i, x in enumerate(keyMatrix):
        if v in x:
            return [i, x.index(v)]
def keyMatrixGeneration(keyMatrix,reducedAlphabet):
    alphacounter = 0 
    alpha = len(reducedAlphabet)
    #print(alpha,'[alpha]')
    while alphacounter < alpha and len(reducedAlphabet[alphacounter:alphacounter+5]) :   
         tempReducedAlphabet = []
         #print(reducedAlphabet[0:5],'[reducedAlphabet temp]')
         tempReducedAlphabet.append(reducedAlphabet[alphacounter:alphacounter+5])
         alphacounter+=5
         keyMatrix.extend(tempReducedAlphabet)
    if alphacounter > alpha and len(reducedAlphabet[alphacounter-5:]):
         tempReducedAlphabet = []
         tempReducedAlphabet.append(reducedAlphabet[alphacounter-5:])
         keyMatrix.append(tempReducedAlphabet)
    return keyMatrix
def playFairCipher(plainText,key):
    # create key matrix
    #print(key,'[key]')
    #print('[playFairCipher def]')
    cipherText = ''
    keyList = list(key.strip(' '))
    keyListSet = set(keyList)  # use this to find difference in alphabet and key
    reducedKeyList = []
    for ch in keyList:
        if ch not in reducedKeyList:
            reducedKeyList.append(ch)
    tempKey = []
    #print(keyListSet,reducedKeyList)
    
    k = len(reducedKeyList)
    counter = 0
    alphabet = list('abcdefghijklmnopqrstuvwxyz')
    alphabetSet = set(alphabet)
    keycount = 5
    #print(k)
    if k==5:
       #print('k==5')
       keyMatrix.append(reducedKeyList[0:5])
    elif k>5:
       while keycount<=k:
            
            keyMatrix.append(reducedKeyList[keycount-5:keycount])
            keycount+=5
       if keycount > k:
                keyMatrix.append(reducedKeyList[keycount-5:])
       
    else:
       keyMatrix.append(reducedKeyList)
        
    print(keyMatrix,'[before keyMatrix]')    
    reducedAlphabetSet = alphabetSet-keyListSet
    #print(reducedAlphabetSet,'[reducedAlphabetSet]')
    reducedAlphabet = list(reducedAlphabetSet)
    reducedAlphabet.sort()
    #print(reducedAlphabet,'[reducedAlphabet list]')
    if 'i'and 'j' in reducedAlphabet:
        reducedAlphabet.remove('j')
    if 'i' not in reducedAlphabet and 'j' not in reducedAlphabet:
        ind = index_2d(keyMatrix,'j')
        print(ind,keyMatrix[ind[0]][ind[1]])
        keyMatrix[ind[0]].remove(keyMatrix[ind[0]][ind[1]])
    lengthCheck = False
    keyN = 0
    # generation of key matrix
    for i in range(0,len(keyMatrix)):
        if len(keyMatrix[i])<5:
            lengthCheck=True
            keyN = i
    if lengthCheck==True:
         tempReducedAlphabet = []
         tempReducedAlphabet.extend(reducedAlphabet[0:5-len(keyMatrix[keyN])])
         #print(tempReducedAlphabet,'[tempReducedAlphabet]')
         keyMatrix[keyN].extend(tempReducedAlphabet) 
         for i in tempReducedAlphabet:
             reducedAlphabet.remove(i)
         #print(reducedAlphabet,'[reducedAlphabet]')
         keyMatrixGeneration(keyMatrix,reducedAlphabet)
    else:
         keyMatrixGeneration(keyMatrix,reducedAlphabet)
    print(keyMatrix,'[keymatrix]')
    # matching plainText with key matrix
    for i in range(0,len(plainText)):
        first=[]
        second=[]
        first.extend(index_2d(keyMatrix,plainText[i][0]))
        second.extend(index_2d(keyMatrix,plainText[i][1]))
        if first[0]!=second[0] and first[1]!=second[1]:
            cipherText += keyMatrix[first[0]][second[1]]+ keyMatrix[second[0]][first[1]]
        elif first[0]==second[0]:
            if first[1]+1<len(keyMatrix[first[0]]):
               cipherText+=keyMatrix[first[0]][first[1]+1]
            else:
               cipherText+=keyMatrix[first[0]][0]
            if second[1]+1<len(keyMatrix[second[0]]):
               cipherText+=keyMatrix[first[0]][second[1]+1]
            else:
               cipherText+=keyMatrix[first[0]][0]
        else:
            if first[0]+1<len(keyMatrix):
               cipherText+=keyMatrix[first[0]+1][first[1]]
            else:
               cipherText+=keyMatrix[0][first[1]]
            if second[0]+1<len(keyMatrix):
               cipherText+=keyMatrix[second[0]+1][second[1]]
            else:
               cipherText+=keyMatrix[0][second[1]]
             
        #print(first,'[first]')
    print(cipherText,'[cipherText]')
    return cipherText
def plainTextConversion(s,key):
    
    i = 0
   
    sList = list(s.strip())
    n = len(sList)
    while(n>0):
       temp=[]
       checkSame=False
       #print(sList,'sList')
       for j in range(0,2):
           if j<len(sList) and sList[j] not in temp :
              temp.append(sList[j])
              checkSame = False
           elif j<len(sList) and sList[j] in temp :
              temp.append('x')
              checkSame = True
           else:
               checkSame = False
               continue
       #print(temp,'temp')
       sList.remove(sList[0])
      # print(checkSame)
       if len(temp)>1 and checkSame == False:
          sList.remove(sList[0])
          plainText.append(temp)
          n=n-2
       elif len(temp)>1 and checkSame == True:
           #do noting
          plainText.append(temp)
          n=n-1
       elif len(temp)<1 and checkSame == True:
           # do nothing
          plainText.append(temp) 
       else:
          temp.append('x')
          plainText.append(temp)
          n=n-2
          
      
       #print(n,'n')
       
       #print(plainText,'plainText')  
        
    print(plainText,'final')
    res = playFairCipher(plainText,key)
    return res
    
if  __name__ == '__main__':
  s = input ('enter plainText : ')
  key = input('enter key text : ')
  s = ''.join(s.split())
  key = ''.join(key.split())
  print(s,'[s]')
  result = plainTextConversion(s,key) 
  print (result)

key = input("Enter key")
key = key.replace(" ", "")
key = key.upper()


def matrix(x, y, initial):
    return [[initial for i in range(x)] for j in range(y)]


result = list()
for c in key:  # storing key
    if c not in result:
        if c == 'J':
            result.append('I')
        else:
            result.append(c)
t = 0
for i in range(65, 91):  # storing other character
    if chr(i) not in result:
        if i == 73 and chr(74) not in result:
            result.append("I")
            t = 1
        elif t == 0 and i == 73 or i == 74:
            pass
        else:
            result.append(chr(i))
k = 0
my_matrix = matrix(5, 5, 0)  # initialize matrix
for i in range(0, 5):  # making matrix
    for j in range(0, 5):
        my_matrix[i][j] = result[k]
        k += 1


def locindex(c):  # get location of each character
    loc = list()
    if c == 'J':
        c = 'I'
    for i, j in enumerate(my_matrix):
        for k, l in enumerate(j):
            if c == l:
                loc.append(i)
                loc.append(k)
                return loc


lookup_table= {'A': '§', 'B': 'ς', 'C': 'Ψ', 'D': 'ω', 'E': '!', 'F': 'Λ', 'G': 'Φ', 'H': '@', 'I': 'τ', 'J': 'Σ',
                'K': 'ς ', 'L': 'Π', 'M': 'Ξ',
                'N': 'ξ', 'O': '&', 'P': 'μ', 'Q': 'λ', 'R': 'κ', 'S': 'Θ', 'T': 'η',
                'U': 'ζ', 'V': 'ε', 'W': 'Δ', 'X': 'Γ', 'Y': 'β', 'Z': '~',
                '§': 'A', 'ς': 'B', 'Ψ': 'C', 'ω': 'D', '!': 'E',
                'Λ': 'F', 'Φ': 'G', '@': 'H', 'τ': 'I', 'Σ': 'J', 'ς ': 'K', 'Π': 'L', 'Ξ': 'M', 'ξ': 'N', '&': 'O',
                'μ': 'P', 'λ': 'Q', 'κ': 'R', 'Θ': 'S', 'η': 'T',
                'ζ': 'U', 'ε': 'V', 'Δ': 'W', 'Γ': 'X', 'β': 'Y', '~': 'Z',' ' : ' '}

def e():
    def encrypt():  # Encryption
        a = ""
        msg = str(input("ENTER YOUR PLAINTEXT:"))
        msg = msg.upper()
        #msg = msg.replace(" ", "")
        i = 0
        for s in range(0, len(msg) + 1, 2):
            if s < len(msg) - 1:
                if msg[s] == msg[s + 1]:
                    msg = msg[:s + 1] + 'X' + msg[s + 1:]
        if len(msg) % 2 != 0:
            msg = msg[:] + 'X'
        print("CIPHER TEXT:", end=' ')
        while i < len(msg):
            loc = list()
            loc = locindex(msg[i])
            loc1 = list()
            loc1 = locindex(msg[i + 1])
            if loc[1] == loc1[1]:
                a += "{}{}".format(my_matrix[(loc[0] + 1) % 5][loc[1]], my_matrix[(loc1[0] + 1) % 5][loc1[1]])
            elif loc[0] == loc1[0]:
                a += "{}{}".format(my_matrix[loc[0]][(loc[1] + 1) % 5], my_matrix[loc1[0]][(loc1[1] + 1) % 5])
            else:
                a += "{}{}".format(my_matrix[loc[0]][loc1[1]], my_matrix[loc1[0]][loc[1]])
            i = i + 2
        return (a)
    b=encrypt()
   
    def greek(message):

        cipher = ''
        for letter in message:
            # checks for space
            if (letter != ' '):
                # adds the corresponding letter from the lookup_table
                cipher += lookup_table[letter]
            else:
                # adds space
                cipher += ' '
        return cipher

    message = b
    a1 = message.upper()
    print(greek(a1))
def f():
    def greek(message):

        cipher = ''
        for letter in message:
            # checks for space
            if (letter != ' '):
                # adds the corresponding letter from the lookup_table
                cipher += lookup_table[letter]
            else:
                # adds space
                cipher += ' '
        return cipher

    message = input("ENTER YOUR PLAINTEXT")
    a1 = message.upper()
    a2=greek(a1)
    print(a2)

    def decrypt():
       msg=str(a2)
       msg=msg.upper()
       msg=msg.replace(" ", "")
       print("PLAIN TEXT:",end=' ')
       i=0
       while i<(len(msg)-1):
         loc=list()
         loc=locindex(msg[i])
         loc1=list()
         loc1=locindex(msg[i+1])
         if loc[1]==loc1[1]:
           print("{}{}".format(my_matrix[(loc[0]-1)%5][loc[1]],my_matrix[(loc1[0]-1)%5][loc1[1]]),end=' ')
         elif loc[0]==loc1[0]:
           print("{}{}".format(my_matrix[loc[0]][(loc[1]-1)%5],my_matrix[loc1[0]][(loc1[1]-1)%5]),end=' ')  
         else:
           print("{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]]),end=' ')    
         i=i+2        
    decrypt()
   
print("PRESS 1 IF YOU WANT TO ENCRYPT")
print("PRESS 2 IF YOU WANT TO DECRYPT")
z=input("ENTER THE NUMBER: ")
if z=="1":
    e()
elif z=='2':
    f()

key=input("Enter key")
key=key.replace(" ", "")
key=key.upper()
def matrix(x,y,initial):
    return [[initial for i in range(x)] for j in range(y)]
    
result=list()
for c in key: #storing key
    if c not in result:
        if c=='J':
            result.append('I')
        else:
            result.append(c)
flag=0
for i in range(65,91): #storing other character
    if chr(i) not in result:
        if i==73 and chr(74) not in result:
            result.append("I")
            flag=1
        elif flag==0 and i==73 or i==74:
            pass    
        else:
            result.append(chr(i))
k=0
my_matrix=matrix(5,5,0) #initialize matrix
for i in range(0,5): #making matrix
    for j in range(0,5):
        my_matrix[i][j]=result[k]
        k+=1

def locindex(c): #get location of each character
    loc=list()
    if c=='J':
        c='I'
    for i ,j in enumerate(my_matrix):
        for k,l in enumerate(j):
            if c==l:
                loc.append(i)
                loc.append(k)
                return loc
            
def encrypt():  #Encryption
    msg=str(input("ENTER MSG:"))
    msg=msg.upper()
    msg=msg.replace(" ", "")             
    i=0
    for s in range(0,len(msg)+1,2):
        if s<len(msg)-1:
            if msg[s]==msg[s+1]:
                msg=msg[:s+1]+'X'+msg[s+1:]
    if len(msg)%2!=0:
        msg=msg[:]+'X'
    print("CIPHER TEXT:",end=' ')
    while i<len(msg):
        loc=list()
        loc=locindex(msg[i])
        loc1=list()
        loc1=locindex(msg[i+1])
        if loc[1]==loc1[1]:
            print("{}{}".format(my_matrix[(loc[0]+1)%5][loc[1]],my_matrix[(loc1[0]+1)%5][loc1[1]]),end=' ')
        elif loc[0]==loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1]+1)%5],my_matrix[loc1[0]][(loc1[1]+1)%5]),end=' ')  
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]]),end=' ')    
        i=i+2        
                 
def decrypt():  #decryption
    msg=str(input("ENTER CIPHER TEXT:"))
    msg=msg.upper()
    msg=msg.replace(" ", "")
    print("PLAIN TEXT:",end=' ')
    i=0
    while i<len(msg):
        loc=list()
        loc=locindex(msg[i])
        loc1=list()
        loc1=locindex(msg[i+1])
        if loc[1]==loc1[1]:
            print("{}{}".format(my_matrix[(loc[0]-1)%5][loc[1]],my_matrix[(loc1[0]-1)%5][loc1[1]]),end=' ')
        elif loc[0]==loc1[0]:
            print("{}{}".format(my_matrix[loc[0]][(loc[1]-1)%5],my_matrix[loc1[0]][(loc1[1]-1)%5]),end=' ')  
        else:
            print("{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]]),end=' ')    
        i=i+2        

while(1):
    choice=int(input("\n 1.Encryption \n 2.Decryption: \n 3.EXIT"))
    if choice==1:
        encrypt()
    elif choice==2:
        decrypt()
    elif choice==3:
        exit()
    else:
        print("Choose correct choice")

key = input("Enter key")
key = key.replace(" ", "")
key = key.upper()


def matrix(x, y, initial):
    return [[initial for i in range(x)] for j in range(y)]


result = list()
for c in key:  # storing key
    if c not in result:
        if c == 'J':
            result.append('I')
        else:
            result.append(c)
flag = 0
for i in range(65, 91):  # storing other character
    if chr(i) not in result:
        if i == 73 and chr(74) not in result:
            result.append("I")
            flag = 1
        elif flag == 0 and i == 73 or i == 74:
            pass
        else:
            result.append(chr(i))
k = 0
my_matrix = matrix(5, 5, 0)  # initialize matrix
for i in range(0, 5):  # making matrix
    for j in range(0, 5):
        my_matrix[i][j] = result[k]
        k += 1


def locindex(c):  # get location of each character
    loc = list()
    if c == 'J':
        c = 'I'
    for i, j in enumerate(my_matrix):
        for k, l in enumerate(j):
            if c == l:
                loc.append(i)
                loc.append(k)
                return loc


lookup_table = {'A': 'α', 'B': 'ς', 'C': 'Ψ', 'D': 'ω', 'E': '!', 'F': 'Λ', 'G': 'Φ', 'H': '@', 'I': 'τ', 'J': 'Σ',
                'K': 'ς ', 'L': 'Π', 'M': 'Ξ',
                'N': 'ξ', 'O': '&', 'P': 'μ', 'Q': 'λ', 'R': 'κ', 'S': 'Θ', 'T': 'η',
                'U': 'ζ', 'V': 'ε', 'W': 'Δ', 'X': 'Γ', 'Y': 'β', 'Z': '#',
                'α': 'A', 'ς': 'B', 'Ψ': 'C', 'ω': 'D', '!': 'E',
                'Λ': 'F', 'Φ': 'G', '@': 'H', 'τ': 'I', 'Σ': 'J', 'ς ': 'K', 'Π': 'L', 'Ξ': 'M', 'ξ': 'N', '&': 'O',
                'μ': 'P', 'λ': 'Q', 'κ': 'R', 'Θ': 'S', 'η': 'T',
                'ζ': 'U', 'ε': 'V', 'Δ': 'W', 'Γ': 'X', 'β': 'Y', '#': 'Z'}

def e():
    def encrypt():  # Encryption
        a = ""
        msg = str(input("ENTER YOUR PLAINTEXT:"))
        msg = msg.upper()
        msg = msg.replace(" ", "")
        i = 0
        for s in range(0, len(msg) + 1, 2):
            if s < len(msg) - 1:
                if msg[s] == msg[s + 1]:
                    msg = msg[:s + 1] + 'X' + msg[s + 1:]
        if len(msg) % 2 != 0:
            msg = msg[:] + 'X'
        print("CIPHER TEXT:", end=' ')
        while i < len(msg):
            loc = list()
            loc = locindex(msg[i])
            loc1 = list()
            loc1 = locindex(msg[i + 1])
            if loc[1] == loc1[1]:
                a += "{}{}".format(my_matrix[(loc[0] + 1) % 5][loc[1]], my_matrix[(loc1[0] + 1) % 5][loc1[1]])
            elif loc[0] == loc1[0]:
                a += "{}{}".format(my_matrix[loc[0]][(loc[1] + 1) % 5], my_matrix[loc1[0]][(loc1[1] + 1) % 5])
            else:
                a += "{}{}".format(my_matrix[loc[0]][loc1[1]], my_matrix[loc1[0]][loc[1]])
            i = i + 2
        return (a)
    b=encrypt()
    
    def greek(message):

        cipher = ''
        for letter in message:
            # checks for space
            if (letter != ' '):
                # adds the corresponding letter from the lookup_table
                cipher += lookup_table[letter]
            else:
                # adds space
                cipher += ' '
        return cipher

    message = b
    a1 = message.upper()
    print(greek(a1))
def f():
    def greek(message):

        cipher = ''
        for letter in message:
            # checks for space
            if (letter != ' '):
                # adds the corresponding letter from the lookup_table
                cipher += lookup_table[letter]
            else:
                # adds space
                cipher += ' '
        return cipher

    message = input("ENTER YOUR PLAINTEXT")
    a1 = message.upper()
    a1=greek(a1)
    def decrypt():  # decryption
        msg = a1
        msg = msg.upper()
        msg = msg.replace(" ", "")
        print("PLAIN TEXT:", end=' ')
        i = 0
        while i < len(msg):
            loc = list()
            loc = locindex(msg[i])
            loc1 = list()
            loc1 = locindex(msg[i + 1])
            if loc[1] == loc1[1]:
                print("{}{}".format(my_matrix[(loc[0] - 1) % 5][loc[1]], my_matrix[(loc1[0] - 1) % 5][loc1[1]]),
                      end=' ')
            elif loc[0] == loc1[0]:
                print("{}{}".format(my_matrix[loc[0]][(loc[1] - 1) % 5], my_matrix[loc1[0]][(loc1[1] - 1) % 5]),
                      end=' ')
            else:
                print("{}{}".format(my_matrix[loc[0]][loc1[1]], my_matrix[loc1[0]][loc[1]]), end=' ')
            i = i + 2
print("PRESS 1 IF YOU WANT TO ENCRYPT")
print("PRESS 2 IF YOU WANT TO DECRYPT")
z=input("ENTER 1 OR 2")
if z=="1":
    e()
else:
    f()

lookup_table = {'A' : 'α', 'B' : 'ς', 'C' : 'Ψ', 'D' : 'ω', 'E' : '!', 'F' : 'Λ', 'G' : 'Φ', 'H' : '@', 'I' : 'τ', 'J' : 'Σ', 'K' : 'ς ', 'L' : 'Π', 'M' : 'Ξ',
                'N' : 'ξ', 'O' : '&', 'P' : 'μ', 'Q' : 'λ', 'R' : 'κ', 'S' : 'Θ', 'T' : 'η',
        'U' : 'ζ', 'V' : 'ε', 'W' : 'Δ', 'X' : 'Γ', 'Y' : 'β', 'Z' : '#',
        'α':'A' , 'ς':'B','Ψ':'C','ω':'D', '!':'E',
        'Λ':'F', 'Φ':'G','@':'H','τ':'I', 'Σ':'J', 'ς ':'K','Π':'L', 'Ξ':'M', 'ξ':'N', '&':'O', 'μ':'P','λ':'Q','κ':'R','Θ':'S', 'η':'T',
        'ζ':'U', 'ε':'V','Δ':'W','Γ':'X', 'β':'Y','#':'Z'}
 
def greek(message):
   
    cipher = ''
    for letter in message:
        # checks for space
        if(letter != ' '):
            #adds the corresponding letter from the lookup_table
            cipher += lookup_table[letter]
        else:
            # adds space
            cipher += ' '
    return cipher
message=input("Enter the plaintext")
a=message.upper()
print(greek(a))

key=input("Enter key")
key=key.replace(" ", "")
key=key.upper()
def matrix(x,y,initial):
    return [[initial for i in range(x)] for j in range(y)]
    
result=list()
for c in key: #storing key
    if c not in result:
        if c=='J':
            result.append('I')
        else:
            result.append(c)
flag=0
for i in range(65,91): #storing other character
    if chr(i) not in result:
        if i==73 and chr(74) not in result:
            result.append("I")
            flag=1
        elif flag==0 and i==73 or i==74:
            pass    
        else:
            result.append(chr(i))
k=0
my_matrix=matrix(5,5,0) #initialize matrix
for i in range(0,5): #making matrix
    for j in range(0,5):
        my_matrix[i][j]=result[k]
        k+=1

def locindex(c): #get location of each character
    loc=list()
    if c=='J':
        c='I'
    for i ,j in enumerate(my_matrix):
        for k,l in enumerate(j):
            if c==l:
                loc.append(i)
                loc.append(k)
                return loc
            
def encrypt():  #Encryption
    a=""
    msg=str(input("ENTER MSG:"))
    msg=msg.upper()
    msg=msg.replace(" ", "")             
    i=0
    for s in range(0,len(msg)+1,2):
        if s<len(msg)-1:
            if msg[s]==msg[s+1]:
                msg=msg[:s+1]+'X'+msg[s+1:]
    if len(msg)%2!=0:
        msg=msg[:]+'X'
    print("CIPHER TEXT:",end=' ')
    while i<len(msg):
        loc=list()
        loc=locindex(msg[i])
        loc1=list()
        loc1=locindex(msg[i+1])
        if loc[1]==loc1[1]:
            a+="{}{}".format(my_matrix[(loc[0]+1)%5][loc[1]],my_matrix[(loc1[0]+1)%5][loc1[1]])
        elif loc[0]==loc1[0]:
            a+="{}{}".format(my_matrix[loc[0]][(loc[1]+1)%5],my_matrix[loc1[0]][(loc1[1]+1)%5])  
        else:
            a+="{}{}".format(my_matrix[loc[0]][loc1[1]],my_matrix[loc1[0]][loc[1]])    
        i=i+2 
    return(a)    

a=encrypt()
lookup_table = {'A' : 'α', 'B' : 'ς', 'C' : 'Ψ', 'D' : 'ω', 'E' : '!', 'F' : 'Λ', 'G' : 'Φ', 'H' : '@', 'I' : 'τ', 'J' : 'Σ', 'K' : 'ς ', 'L' : 'Π', 'M' : 'Ξ',
                'N' : 'ξ', 'O' : '&', 'P' : 'μ', 'Q' : 'λ', 'R' : 'κ', 'S' : 'Θ', 'T' : 'η',
        'U' : 'ζ', 'V' : 'ε', 'W' : 'Δ', 'X' : 'Γ', 'Y' : 'β', 'Z' : '#',
        'α':'A' , 'ς':'B','Ψ':'C','ω':'D', '!':'E',
        'Λ':'F', 'Φ':'G','@':'H','τ':'I', 'Σ':'J', 'ς ':'K','Π':'L', 'Ξ':'M', 'ξ':'N', '&':'O', 'μ':'P','λ':'Q','κ':'R','Θ':'S', 'η':'T',
        'ζ':'U', 'ε':'V','Δ':'W','Γ':'X', 'β':'Y','#':'Z'}
 
def greek(message):
   
    cipher = ''
    for letter in message:
        # checks for space
        if(letter != ' '):
            #adds the corresponding letter from the lookup_table
            cipher += lookup_table[letter]
        else:
            # adds space
            cipher += ' '
    return cipher
message=a
a1=message.upper()
print(greek(a1))